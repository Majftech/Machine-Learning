"""
This is notes
"""

Suppose there is a Fruit class and you have two attributes - color and season.

Now there are three things you can do:

1. You can access - read or change the attributes directly:
    Fruit.color='yellow'
2. Write a change method explicitly
   def change_color(self,color):
       self.color=color
3. Write explicitly Getters and setters. 
   A get method is for obtaining an attribute value. 
   A set method is for changing an attribute value. 
   
   For example:If you were writing a Shirt class, the code could look like this:

    class Shirt:

        def __init__(self, shirt_color, shirt_size, shirt_style, shirt_price):
            self._price = shirt_price
            
        def get_price(self):
          return self._price

        def set_price(self, new_price):
          self._price = new_price

We notice that, Accessing attributes in Python can be somewhat different than in other programming languages like Java and C++.
Python is lenient, and you can directly access the values. However, you should not do and instead write Getters and Setters.



A workaround 'Convention' that programmars do:

In the class definition, the underscore in front of price is a somewhat controversial Python convention. 
In other languages like C++ or Java, price could be explicitly labeled as a private variable. 
This would prohibit an object from accessing the price attribute directly like shirt_one._price = 15. 
However, Python does not distinguish between private and public variables like other languages. 
Therefore, there is some controversy about using the underscore convention as well as get and set methods in Python. 
Why use get and set methods in Python when Python wasn't designed to use them?

At the same time, you'll find that some Python programmers develop object-oriented programs using get and set methods anyway. 
Following the Python convention, the underscore in front of price is to let a programmer know that price should only be accessed with 
get and set methods rather than accessing price directly with shirt_one._price. However, a programmer could still access _price directly 
because there is nothing in the Python language to prevent the direct access.

To reiterate, a programmer could technically still do something like shirt_one._price = 10, and the code would work. 
But accessing price directly, in this case, would not be following the intent of how the Shirt class was designed.

One of the benefits of set and get methods is that, as previously mentioned in the course, you can hide the implementation from your user. 
Maybe originally a variable was coded as a list and later became a dictionary. 
With set and get methods, you could easily change how that variable gets accessed. Without set and get methods, you'd have to go to every place in the code 
that accessed the variable directly and change the code.

